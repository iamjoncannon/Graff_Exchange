{"version":3,"sources":["webpack:///./app/components/indiv/PerformanceChart.js"],"names":["PerformanceChart","props","resize","setState","dimensions","width","container","offsetWidth","height","offsetHeight","state","this","window","addEventListener","bind","removeEventListener","selectedPortfolioItem","period","data","portfolio","historical","slice","reverse","each","date","replace","LineChart","margin","top","right","left","bottom","XAxis","dataKey","hide","isDesktop","YAxis","domain","Tooltip","Line","type","stroke","dot","selectedPortfolioItem_object","className","ref","el","renderContent","size","React","Component","connect","Portfolio_state"],"mappings":"wYAAA,MACA,QACA,SACA,Q,IACA,O,uDAEMA,E,YAEF,WAAYC,I,4FAAM,e,iKAAA,wDACRA,IADQ,SAoBlBC,OAAS,WAEL,EAAKC,SAAS,CACVC,WAAY,CACVC,MAAO,EAAKC,UAAUC,YACtBC,OAAQ,EAAKF,UAAUG,iBAtB7B,EAAKC,MAAQ,GAHC,E,qXAQdC,KAAKT,SAELU,OAAOC,iBAAiB,SAAUF,KAAKT,OAAOY,KAAKH,S,6CAMnDC,OAAOG,oBAAoB,SAAUJ,KAAKT,OAAOY,KAAKH,S,sCAc3C,MAEeA,KAAKD,MAAMN,WAA7BC,EAFG,EAEHA,MAAOG,EAFJ,EAEIA,OAFJ,EAI2CG,KAAKV,MAAlDe,EAJE,EAIFA,sBAAuBC,EAJrB,EAIqBA,OAI5BC,EARO,EAI6BC,UAEOH,GAEPI,WAAWC,MAAM,EAAGJ,GAAQK,UAEpE,IAAI,IAAIC,KAAQL,EACZA,EAAKK,GAAMC,KAAON,EAAKK,GAAMC,KAAKC,QAAQ,QAAS,IAAIA,QAAQ,QAAS,IAG5E,OAEI,wBAAC,EAAAC,UAAD,CACIrB,MAAOA,EAAOG,OAAQA,EAAQU,KAAMA,EACpCS,OAAQ,CAACC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAG/C,wBAAC,EAAAC,MAAD,CAAOC,QAAQ,OAAQC,OAAQ,IAAAC,cAAelB,EAAS,MAEvD,wBAAC,EAAAmB,MAAD,CAAOC,OAAQ,CAAC,OAAQ,UAGxB,wBAAC,EAAAC,QAAD,MAEA,wBAAC,EAAAC,KAAD,CAAMC,KAAK,WAAWP,QAAQ,OAAOQ,OAAO,OAAOC,KAAK,IAExD,wBAAC,EAAAH,KAAD,CAAMC,KAAK,WAAWP,QAAQ,OAAOQ,OAAO,QAAOC,KAAK,IACxD,wBAAC,EAAAH,KAAD,CAAMC,KAAK,WAAWP,QAAQ,MAAMQ,OAAO,MAAMC,KAAK,IACtD,wBAAC,EAAAH,KAAD,CAAMC,KAAK,WAAWP,QAAQ,QAAQQ,OAAO,QAAQC,KAAK,O,+BAM9D,WAEItC,EAAeO,KAAKD,MAApBN,WAFJ,EAIyCO,KAAKV,MAE5C0C,EANF,EAIIxB,UAJJ,EAIeH,uBAInB,OAEI,+BAAK4B,UAAU,QAAQC,IAAK,SAAAC,GAAA,OAAO,EAAKxC,UAAYwC,IAE9C1C,GAAcuC,EAA6BvB,WACzCT,KAAKoC,gBAEL,wBAAC,UAAD,CAAaC,KAAK,e,GArFPC,UAAMC,W,WAqGtB,IAAAC,UARS,SAAC,GAAwB,IAAtBC,EAAsB,EAAtBA,gBAEvB,MAAO,CACLpC,sBAAwBoC,EAAgBpC,sBACxCG,UAAWiC,EAAgBjC,aAM7B,KAFW,CAGbnB","file":"2.4033eff310ebd951090b.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\nimport {isDesktop} from '../utils'\nimport LoadingDots from '../loadingDots'\n\nclass PerformanceChart extends React.Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {}\n    }\n\n    componentDidMount() {\n        \n        this.resize()\n\n        window.addEventListener(\"resize\", this.resize.bind(this))\n\n    }\n\n    componentWillUnmount(){\n\n        window.removeEventListener(\"resize\", this.resize.bind(this))\n\n    }\n    \n    resize = () => {\n\n        this.setState({\n            dimensions: {\n              width: this.container.offsetWidth,\n              height: this.container.offsetHeight,\n            },\n          });\n    }\n\n    renderContent(){\n\n        const { width, height } = this.state.dimensions;\n\n        const  { selectedPortfolioItem, period, portfolio } = this.props\n\n        const selectedPortfolioItem_object = portfolio[selectedPortfolioItem]\n\n        let data = selectedPortfolioItem_object.historical.slice(0, period).reverse()\n\n        for(let each in data){\n            data[each].date = data[each].date.replace(\"2019-\", \"\").replace(\"2018-\", \"\")\n        }\n\n        return (\n\n            <LineChart \n                width={width} height={height} data={data}\n                margin={{top: 30, right: 30, left: 30, bottom: 5}}\n            >\n\n                <XAxis dataKey=\"date\"  hide={ !isDesktop() || period > 100 ? true : false}/>\n\n                <YAxis domain={['auto', 'auto']} />\n                \n                {/* <CartesianGrid strokeDasharray=\"3 3\"/> */}\n                <Tooltip/>\n                {/* <Legend /> */}\n                <Line type=\"monotone\" dataKey=\"open\" stroke=\"blue\" dot={false} /> \n                {/* activeDot={{r: 1}} */}\n                <Line type=\"monotone\" dataKey=\"high\" stroke=\"green\"dot={false} />\n                <Line type=\"monotone\" dataKey=\"low\" stroke=\"red\" dot={false} />\n                <Line type=\"monotone\" dataKey=\"close\" stroke=\"black\" dot={false}/>\n          </LineChart>\n\n        );\n    } \n\n    render(){\n      \n        const { dimensions } = this.state;\n\n        const { portfolio, selectedPortfolioItem } = this.props\n\n        const selectedPortfolioItem_object = portfolio[selectedPortfolioItem]\n\n        return(\n\n            <div className=\"chart\" ref={el => (this.container = el)}>\n\n                { dimensions && selectedPortfolioItem_object.historical ? \n                    this.renderContent()\n                    : \n                    <LoadingDots size=\"10rem\"/>\n                }\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({ Portfolio_state }) => {\n\n    return {\n      selectedPortfolioItem : Portfolio_state.selectedPortfolioItem,\n      portfolio: Portfolio_state.portfolio\n    };\n};\n  \nexport default connect(\n    mapStateToProps,\n    null\n)(PerformanceChart);\n"],"sourceRoot":""}