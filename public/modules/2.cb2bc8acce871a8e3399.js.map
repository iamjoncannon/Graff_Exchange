{"version":3,"sources":["webpack:///./app/components/indiv/PerformanceChart.js"],"names":["PerformanceChart","props","resize","setState","dimensions","width","container","offsetWidth","height","offsetHeight","state","window","addEventListener","bind","removeEventListener","selectedPortfolioItem","period","portfolio","selectedPortfolioItem_object","data","historical","slice","reverse","each","date","replace","top","right","left","bottom","el","renderContent","React","Component","mapStateToProps","Portfolio_state"],"mappings":"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","file":"./modules/2.cb2bc8acce871a8e3399.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\nimport {isDesktop} from '../utils'\nimport LoadingDots from '../loadingDots'\n\nclass PerformanceChart extends React.Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {}\n    }\n\n    componentDidMount() {\n        \n        this.resize()\n\n        window.addEventListener(\"resize\", this.resize.bind(this))\n\n    }\n\n    componentWillUnmount(){\n\n        window.removeEventListener(\"resize\", this.resize.bind(this))\n\n    }\n    \n    resize = () => {\n\n        this.setState({\n            dimensions: {\n              width: this.container.offsetWidth,\n              height: this.container.offsetHeight,\n            },\n          });\n    }\n\n    renderContent(){\n\n        const { width, height } = this.state.dimensions;\n\n        const  { selectedPortfolioItem, period, portfolio } = this.props\n\n        const selectedPortfolioItem_object = portfolio[selectedPortfolioItem]\n\n        let data = selectedPortfolioItem_object.historical.slice(0, period).reverse()\n\n        for(let each in data){\n            data[each].date = data[each].date.replace(\"2019-\", \"\").replace(\"2018-\", \"\")\n        }\n\n        return (\n\n            <LineChart \n                width={width} height={height} data={data}\n                margin={{top: 30, right: 30, left: 30, bottom: 5}}\n            >\n\n                <XAxis dataKey=\"date\"  hide={ !isDesktop() || period > 100 ? true : false}/>\n\n                <YAxis domain={['auto', 'auto']} />\n                \n                {/* <CartesianGrid strokeDasharray=\"3 3\"/> */}\n                <Tooltip/>\n                {/* <Legend /> */}\n                <Line type=\"monotone\" dataKey=\"open\" stroke=\"blue\" dot={false} /> \n                {/* activeDot={{r: 1}} */}\n                <Line type=\"monotone\" dataKey=\"high\" stroke=\"green\"dot={false} />\n                <Line type=\"monotone\" dataKey=\"low\" stroke=\"red\" dot={false} />\n                <Line type=\"monotone\" dataKey=\"close\" stroke=\"black\" dot={false}/>\n          </LineChart>\n\n        );\n    } \n\n    render(){\n      \n        const { dimensions } = this.state;\n\n        const { portfolio, selectedPortfolioItem } = this.props\n\n        const selectedPortfolioItem_object = portfolio[selectedPortfolioItem]\n\n        return(\n\n            <div className=\"chart\" ref={el => (this.container = el)}>\n\n                { dimensions && selectedPortfolioItem_object.historical ? \n                    this.renderContent()\n                    : \n                    <LoadingDots size=\"10rem\"/>\n                }\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({ Portfolio_state }) => {\n\n    return {\n      selectedPortfolioItem : Portfolio_state.selectedPortfolioItem,\n      portfolio: Portfolio_state.portfolio\n    };\n};\n  \nexport default connect(\n    mapStateToProps,\n    null\n)(PerformanceChart);\n"],"sourceRoot":""}