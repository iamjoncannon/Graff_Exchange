{"version":3,"sources":["webpack:///./app/components/indiv/PerformanceChart.js"],"names":["PerformanceChart","props","console","log","process","setState","dimensions","width","container","offsetWidth","height","offsetHeight","state","resize","window","addEventListener","bind","removeEventListener","selectedPortfolioItem","period","portfolio","selectedPortfolioItem_object","data","historical","slice","reverse","each","date","replace","top","right","left","bottom","isDesktop","el","renderContent","React","Component","mapStateToProps","Portfolio_state","connect"],"mappings":"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","file":"./modules/2.3be0ae57307b433473d8.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\nimport {isDesktop} from '../utils'\nimport LoadingDots from '../loadingDots'\n\nclass PerformanceChart extends React.Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {}\n    }\n\n    componentDidMount() {\n        \n        this.resize()\n\n        window.addEventListener(\"resize\", this.resize.bind(this))\n\n    }\n\n    componentWillUnmount(){\n\n        window.removeEventListener(\"resize\", this.resize.bind(this))\n\n    }\n    \n    resize = () => {\n\n        console.log(process.env.NODE_ENV)\n        \n        if(process.env.NODE_ENV === \"Test\"){\n            this.container.offsetHeight = 100\n            this.container.offsetWidth = 100 \n        }\n\n        this.setState({\n            dimensions: {\n              width: this.container.offsetWidth,\n              height: this.container.offsetHeight,\n            },\n          });\n    }\n\n    renderContent(){\n\n        const { width, height } = this.state.dimensions;\n\n        const  { selectedPortfolioItem, period, portfolio } = this.props\n\n        const selectedPortfolioItem_object = portfolio[selectedPortfolioItem]\n\n        let data = selectedPortfolioItem_object.historical.slice(0, period).reverse()\n\n        for(let each in data){\n            data[each].date = data[each].date.replace(\"2019-\", \"\").replace(\"2018-\", \"\")\n        }\n\n        return (\n\n            <LineChart \n                width={width} height={height} data={data}\n                margin={{top: 30, right: 30, left: 30, bottom: 5}}\n            >\n\n                <XAxis dataKey=\"date\"  hide={ !isDesktop() || period > 100 ? true : false}/>\n\n                <YAxis domain={['auto', 'auto']} />\n                \n                {/* <CartesianGrid strokeDasharray=\"3 3\"/> */}\n                <Tooltip/>\n                {/* <Legend /> */}\n                <Line type=\"monotone\" dataKey=\"open\" stroke=\"blue\" dot={false} /> \n                {/* activeDot={{r: 1}} */}\n                <Line type=\"monotone\" dataKey=\"high\" stroke=\"green\"dot={false} />\n                <Line type=\"monotone\" dataKey=\"low\" stroke=\"red\" dot={false} />\n                <Line type=\"monotone\" dataKey=\"close\" stroke=\"black\" dot={false}/>\n          </LineChart>\n\n        );\n    } \n\n    render(){\n      \n        const { dimensions } = this.state;\n\n        const { portfolio, selectedPortfolioItem } = this.props\n\n        const selectedPortfolioItem_object = portfolio[selectedPortfolioItem]\n\n        return(\n\n            <div className=\"chart\" ref={el => (this.container = el)}>\n\n                { dimensions && selectedPortfolioItem_object.historical ? \n                    this.renderContent()\n                    : \n                    <LoadingDots size=\"10rem\"/>\n                }\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({ Portfolio_state }) => {\n\n    return {\n      selectedPortfolioItem : Portfolio_state.selectedPortfolioItem,\n      portfolio: Portfolio_state.portfolio\n    };\n};\n  \nexport default connect(\n    mapStateToProps,\n    null\n)(PerformanceChart);\n"],"sourceRoot":""}